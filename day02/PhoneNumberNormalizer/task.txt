Упражнение № 8: нормализатор телефонных номеров
Статус упражнения: освобожден

Детали упражнения
Это упражнение довольно простое — мы собираемся написать программу, которая будет перебирать базу данных и нормализовать все телефонные номера в БД. После нормализации всех данных мы можем обнаружить дубликаты, поэтому мы удалим эти дубликаты, оставив только одну запись в нашей базе данных.

Хотя основная цель — создать программу, нормализующую базу данных, мы также рассмотрим, как настроить базу данных и записать в нее записи с помощью Go. Это сделано намеренно, чтобы попытаться научить пользоваться Go при взаимодействии с базой данных SQL.

Есть много способов использовать SQL в Go. Вместо того, чтобы просто выбрать один, я попытаюсь охватить несколько. Если вы хотите увидеть какие-либо дополнительные библиотеки, не стесняйтесь обращаться к нам, и я постараюсь добавить их. На данный момент вот библиотеки, которые я собираюсь охватить:

Написание сырого SQL и использование пакета database/sql в стандартной библиотеке
Использование очень популярного стороннего пакета sqlx , который в основном является расширением пакета Go sql.
Используя относительно минималистичный ORM (я буду использовать gorm )
Нам также потребуется изучить некоторые основные приемы работы со строками, чтобы нормализовать наши телефонные номера, но основное внимание здесь будет уделено SQL, поэтому я постараюсь сделать эту часть кода относительно простой.

Я собираюсь использовать SQLite и Postgres для видео, но если вы хотите увидеть пример MySQL (он должен быть почти идентичен двум другим), дайте мне знать, и я попытаюсь добавить его, как только остальные Gophercises сделано.

Перейдем к упражнению — мы начнем с создания базы данных вместе с phone_numbersтаблицей. Внутри этой таблицы мы хотим добавить следующие записи (да, я знаю, что есть дубликаты):

1234567890
123 456 7891
(123) 456 7892
(123) 456-7893
123-456-7894
123-456-7890
1234567892
(123)456-7892
Вы можете организовать свою таблицу так, как хотите, и вы можете добавить любые дополнительные поля, которые хотите. Мои таблицы, вероятно, будут различаться в зависимости от того, какую из библиотек я использую, поскольку ORM, такие как GORM, часто автоматически добавляют для нас несколько полей. Вы также можете создать таблицу вручную (с помощью необработанного SQL), если хотите, но попробуйте вставить записи с помощью кода Go.

После того, как вы создали записи, наш следующий шаг — научиться перебирать записи в базе данных с помощью кода Go. При этом мы должны иметь возможность получить каждое число, чтобы мы могли начать нормализовать его содержимое.

Когда у вас есть все данные в БД, наш следующий шаг — нормализовать номер телефона. Мы собираемся обновить все наши числа, чтобы они соответствовали формату:

##########
То есть мы удалим все форматирование и сохраним только цифры. Когда мы захотим отобразить числа позже, мы всегда можем отформатировать их, но сейчас нам нужны только цифры.

В предоставленном списке номеров первая запись, а также предпоследняя запись соответствуют этому формату. Все остальные нет и должны быть переформатированы. Есть также несколько дубликатов, которые появятся после того, как мы переформатируем все числа, и их нужно будет удалить из базы данных, но пока не беспокойтесь об этом.

После того, как вы написали код, который будет успешно принимать число в любом формате и возвращать то же число в правильном формате, мы собираемся использовать для UPDATEизменения записей в базе данных. Если значение, которое мы вставляем в нашу базу данных, уже существует (это дубликат), вместо этого мы удалим исходную запись.

Когда ваша программа будет завершена, ваши записи в базе данных должны выглядеть так (порядок не имеет значения, но дубликаты должны быть удалены):

1234567890
1234567891
1234567892
1234567893
1234567894
Бонус
В этом упражнении нет конкретного бонуса. Если вы хотите, вы можете изучить другие сторонние библиотеки SQL и другие базы данных SQL (MySQL и т. д.), но это зависит от вас.

Дополнительные ресурсы
Я много писал о Go и PostgreSQL здесь — https://www.calhoun.io/using-postgresql-with-golang/
Хотя большинство статей посвящено PostgreSQL, использование других вариантов SQL, как правило, почти идентично с некоторыми незначительные исключения (например, при подключении к базе данных или использовании функций, специфичных для БД).

Не все статьи являются полными, но если вы застряли, ознакомьтесь с ними, чтобы получить помощь. В частности, если вы используете Postgres и получаете сообщение об ошибке, например, pq: SSL is not enabled on the serverпри попытке подключения, я рекомендую посмотреть эту статью — https://www.calhoun.io/connecting-to-a-postgresql-database-with-gos-database- sql-пакет/